<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>物理運動 統合グラフジェネレーター</title>
    <!-- Tailwind CSSを読み込み -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.jsを読み込み -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- MathJax (LaTeX) を読み込み -->
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        /* フォント設定 */
        body {
            font-family: 'Inter', sans-serif;
        }
        /* 入力欄の共通スタイル */
        .param-input {
            width: 100px;
            padding: 8px;
            text-align: center;
            background-color: #f3f4f6;
            border: 2px solid #d1d5db;
            border-radius: 0.5rem;
            transition: all 0.2s;
        }
        .dark .param-input {
            background-color: #374151;
            border-color: #4b5563;
            color: #f9fafb;
        }
        .param-input:focus {
            outline: none;
            --tw-ring-color: #4f46e5;
            --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);
            --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color);
            box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);
            border-color: #4f46e5;
        }
        /* ラベルの共通スタイル */
        .param-label {
            font-size: 1.125rem;
            font-weight: 500;
            width: 40px;
            text-align: right;
        }
        /* アクティブなボタンのスタイル */
        .btn-active {
            background-color: #4f46e5; /* indigo-600 */
            color: white;
            z-index: 10;
        }
        /* 非アクティブなボタンのスタイル */
        .btn-inactive {
            background-color: #e5e7eb; /* gray-200 */
            color: #374151; /* gray-700 */
        }
        .dark .btn-inactive {
            background-color: #4b5563; /* dark:bg-gray-600 */
            color: #d1d5db; /* dark:text-gray-300 */
        }
        /* 公式表示エリアのスタイル */
        .formula-box {
            font-size: 1.1rem; /* text-lg */
            padding: 1rem; /* p-4 */
            background-color: #f9fafb; /* bg-gray-50 */
            border-radius: 0.75rem; /* rounded-xl */
            border: 1px solid #e5e7eb; /* border-gray-200 */
        }
        .dark .formula-box {
            background-color: #1f2937; /* dark:bg-gray-800 */
            border-color: #374151; /* dark:border-gray-700 */
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 flex flex-col items-center min-h-screen p-4">

    <div class="w-full max-w-7xl mx-auto bg-white dark:bg-gray-800 rounded-2xl shadow-lg p-6 md:p-8">
        <h1 id="main-title" class="text-2xl md:text-3xl font-bold text-center text-indigo-600 dark:text-indigo-400 mb-4">
            物理運動グラフ
        </h1>

        <!-- モード切り替えボタン -->
        <div class="flex justify-center mb-6">
            <div class="flex border-2 border-gray-300 dark:border-gray-600 rounded-lg text-xs sm:text-sm md:text-base flex-wrap">
                <button id="btnFreeFall" class="py-2 px-2 md:px-3 rounded-l-md transition-colors duration-300">自由落下</button>
                <button id="btnVerticalThrowDown" class="py-2 px-2 md:px-3 transition-colors duration-300 border-l border-gray-300 dark:border-gray-600">投げ下ろし</button>
                <button id="btnVerticalThrowUp" class="py-2 px-2 md:px-3 transition-colors duration-300 border-l border-gray-300 dark:border-gray-600">投げ上げ</button>
                <button id="btnHorizontalProjectile" class="py-2 px-2 md:px-3 transition-colors duration-300 border-l border-gray-300 dark:border-gray-600">水平投射</button>
                <button id="btnProjectile" class="py-2 px-2 md:px-3 transition-colors duration-300 border-l border-gray-300 dark:border-gray-600">斜方投射</button>
                <button id="btnAcceleration" class="py-2 px-2 md:px-3 transition-colors duration-300 border-l border-r border-gray-300 dark:border-gray-600">加速度</button>
                <button id="btnUniform" class="py-2 px-2 md:px-3 rounded-r-md transition-colors duration-300">等加速度</button>
            </div>
        </div>

        <!-- 操作パネル -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8 bg-gray-50 dark:bg-gray-700 p-6 rounded-xl">
            <!-- パラメータ設定 -->
            <div>
                <h2 class="text-xl font-semibold mb-4 text-center">パラメータ設定</h2>
                <div class="space-y-4">
                    <div id="gravity-container" class="flex items-center justify-center gap-4">
                        <label for="gravity" class="param-label">g:</label>
                        <input type="number" id="gravity" value="9.8" step="0.1" class="param-input">
                        <span>m/s²</span>
                    </div>
                    <div id="acceleration-container" class="flex items-center justify-center gap-4 hidden">
                        <label for="acceleration" class="param-label">a:</label>
                        <input type="number" id="acceleration" value="2.0" step="0.1" class="param-input">
                        <span>m/s²</span>
                    </div>
                    <div class="flex items-center justify-center gap-4">
                        <label for="initialVelocity" class="param-label">v₀:</label>
                        <input type="number" id="initialVelocity" value="0" step="0.1" class="param-input">
                        <span>m/s</span>
                    </div>
                     <div id="angle-container" class="flex items-center justify-center gap-4 hidden">
                        <label for="angle" class="param-label">θ:</label>
                        <input type="number" id="angle" value="45" step="1" class="param-input">
                        <span>°</span>
                    </div>
                     <div class="flex items-center justify-center gap-4">
                        <label for="maxTime" class="param-label">t_max:</label>
                        <input type="number" id="maxTime" value="5" step="0.1" min="1" class="param-input">
                        <span>s</span>
                    </div>
                </div>
            </div>

            <!-- 現在値の確認 -->
            <div>
                <h2 class="text-xl font-semibold mb-4 text-center">現在値の確認</h2>
                <div class="space-y-4">
                    <div class="flex items-center justify-center gap-4">
                        <label for="timeSlider" class="param-label">t:</label>
                        <input type="range" id="timeSlider" min="0" max="5" step="0.1" value="0" class="w-40 md:w-48">
                        <span id="timeValue" class="w-16 text-left">0.0 s</span>
                    </div>
                    <div id="position-container" class="flex items-center justify-center gap-4">
                        <span id="position-label" class="param-label">y:</span>
                        <span id="positionValue" class="param-input bg-white dark:bg-gray-800">0.00</span>
                        <span>m</span>
                    </div>
                    <div id="velocity-container" class="flex items-center justify-center gap-4">
                        <span class="param-label">v:</span>
                        <span id="velocityValue" class="param-input bg-white dark:bg-gray-800">0.00</span>
                        <span>m/s</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- 公式表示エリア -->
        <div class="mb-8">
            <h2 class="text-xl font-semibold mb-4 text-center">公式</h2>
            <div id="formula-display" class="formula-box text-center">
                <!-- ここに選択されたモードの公式がJavaScriptによって挿入されます -->
            </div>
        </div>

        <!-- グラフのコンテナ -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-xl"><canvas id="graph1"></canvas></div>
            <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-xl"><canvas id="graph2"></canvas></div>
            <div class="bg-gray-50 dark:bg-gray-700 p-4 rounded-xl"><canvas id="graph3"></canvas></div>
        </div>
    </div>

    <script>
        // グローバル変数
        let currentMode = 'freeFall';
        let graph1Instance, graph2Instance, graph3Instance;
        const timeStep = 0.1;

        // HTML要素の取得
        const elements = {
            mainTitle: document.getElementById('main-title'),
            buttons: {
                freeFall: document.getElementById('btnFreeFall'),
                verticalThrowDown: document.getElementById('btnVerticalThrowDown'),
                verticalThrowUp: document.getElementById('btnVerticalThrowUp'),
                horizontalProjectile: document.getElementById('btnHorizontalProjectile'),
                projectile: document.getElementById('btnProjectile'),
                acceleration: document.getElementById('btnAcceleration'),
                uniform: document.getElementById('btnUniform'),
            },
            containers: {
                gravity: document.getElementById('gravity-container'),
                acceleration: document.getElementById('acceleration-container'),
                angle: document.getElementById('angle-container'),
                position: document.getElementById('position-container'),
                velocity: document.getElementById('velocity-container'),
            },
            inputs: {
                gravity: document.getElementById('gravity'),
                acceleration: document.getElementById('acceleration'),
                initialVelocity: document.getElementById('initialVelocity'),
                angle: document.getElementById('angle'),
                maxTime: document.getElementById('maxTime'),
                timeSlider: document.getElementById('timeSlider'),
            },
            formulaDisplay: document.getElementById('formula-display'),
            contexts: {
                graph1: document.getElementById('graph1').getContext('2d'),
                graph2: document.getElementById('graph2').getContext('2d'),
                graph3: document.getElementById('graph3').getContext('2d'),
            }
        };
        
        const formulas = {
            freeFall: `$$ v = gt $$ $$ y = \\frac{1}{2}gt^2 $$`,
            verticalThrowDown: `$$ v = v_0 + gt $$ $$ y = v_0t + \\frac{1}{2}gt^2 $$`,
            verticalThrowUp: `$$ v = v_0 - gt $$ $$ y = v_0t - \\frac{1}{2}gt^2 $$`,
            horizontalProjectile: `水平: $$ x = v_0t $$ 垂直: $$ y = \\frac{1}{2}gt^2 $$ <br> 軌道: $$ y = \\frac{g}{2v_0^2}x^2 $$`,
            projectile: `水平: $$ x = (v_0 \\cos\\theta)t $$ 垂直: $$ y = (v_0 \\sin\\theta)t - \\frac{1}{2}gt^2 $$ <br> 軌道: $$ y = (\\tan\\theta)x - \\frac{g}{2v_0^2\\cos^2\\theta}x^2 $$`,
            acceleration: `$$ v = v_0 + at $$ $$ y = v_0t + \\frac{1}{2}at^2 $$`,
            uniform: `$$ v = v_0 + at $$ $$ x = v_0t + \\frac{1}{2}at^2 $$`
        };

        // モードを切り替える関数
        function setMode(mode) {
            currentMode = mode;
            Object.values(elements.buttons).forEach(btn => {
                btn.classList.add('btn-inactive');
                btn.classList.remove('btn-active');
            });
            elements.buttons[mode].classList.add('btn-active');
            elements.buttons[mode].classList.remove('btn-inactive');
            
            // 公式の表示を更新
            elements.formulaDisplay.innerHTML = formulas[mode];
            MathJax.typesetPromise([elements.formulaDisplay]);


            // UIの表示をリセット
            elements.containers.position.innerHTML = `
                <span id="position-label" class="param-label">y:</span>
                <span id="positionValue" class="param-input bg-white dark:bg-gray-800">0.00</span>
                <span>m</span>`;
            elements.containers.velocity.innerHTML = `
                <span class="param-label">v:</span>
                <span id="velocityValue" class="param-input bg-white dark:bg-gray-800">0.00</span>
                <span>m/s</span>`;
            
            elements.containers.angle.classList.add('hidden');

            if (mode === 'horizontalProjectile' || mode === 'projectile') {
                elements.mainTitle.textContent = mode === 'horizontalProjectile' ? '水平投射' : '斜方投射';
                elements.containers.gravity.classList.remove('hidden');
                elements.containers.acceleration.classList.add('hidden');
                if (elements.inputs.initialVelocity.value == 0) {
                    elements.inputs.initialVelocity.value = 20;
                }
                if (mode === 'projectile') {
                    elements.containers.angle.classList.remove('hidden');
                }
                elements.containers.position.innerHTML = `
                    <span class="param-label">x:</span><span id="positionX" class="param-input bg-white dark:bg-gray-800">0.00</span><span>m</span>
                    <span class="param-label">y:</span><span id="positionY" class="param-input bg-white dark:bg-gray-800">0.00</span><span>m</span>`;
                elements.containers.velocity.innerHTML = `
                    <span class="param-label">vₓ:</span><span id="velocityX" class="param-input bg-white dark:bg-gray-800">0.00</span><span>m/s</span>
                    <span class="param-label">vᵧ:</span><span id="velocityY" class="param-input bg-white dark:bg-gray-800">0.00</span><span>m/s</span>`;

            } else if (mode === 'freeFall' || mode === 'verticalThrowDown' || mode === 'verticalThrowUp') {
                elements.containers.gravity.classList.remove('hidden');
                elements.containers.acceleration.classList.add('hidden');
                document.getElementById('position-label').textContent = 'y:';
                
                if (mode === 'freeFall') {
                    elements.mainTitle.textContent = '自由落下運動';
                    elements.inputs.initialVelocity.value = 0;
                } else if (mode === 'verticalThrowDown') {
                    elements.mainTitle.textContent = '鉛直投げ下ろし';
                    if (elements.inputs.initialVelocity.value == 0) elements.inputs.initialVelocity.value = 5;
                } else { // verticalThrowUp
                    elements.mainTitle.textContent = '鉛直投げ上げ';
                    if (elements.inputs.initialVelocity.value <= 0) elements.inputs.initialVelocity.value = 20;
                }
            } else { // 加速度 or 等加速度
                elements.containers.gravity.classList.add('hidden');
                elements.containers.acceleration.classList.remove('hidden');
                elements.mainTitle.textContent = (mode === 'acceleration') ? '加速度運動' : '等加速度運動';
                document.getElementById('position-label').textContent = (mode === 'uniform') ? 'x:' : 'y:';
            }
            updateAll();
        }

        function getAcceleration() {
            switch (currentMode) {
                case 'freeFall':
                case 'verticalThrowDown':
                case 'horizontalProjectile':
                    return parseFloat(elements.inputs.gravity.value) || 9.8;
                case 'verticalThrowUp':
                case 'projectile':
                    return -(parseFloat(elements.inputs.gravity.value) || 9.8);
                case 'acceleration':
                case 'uniform':
                    return parseFloat(elements.inputs.acceleration.value) || 0;
                default: return 0;
            }
        }

        function updateAll() {
            updateGraphs();
            updateCalculator();
        }

        function updateGraphs() {
            const v0 = parseFloat(elements.inputs.initialVelocity.value) || 0;
            const tMax = parseFloat(elements.inputs.maxTime.value) || 10;
            const a = getAcceleration();
            
            elements.inputs.timeSlider.max = tMax;

            if (graph1Instance) graph1Instance.destroy();
            if (graph2Instance) graph2Instance.destroy();
            if (graph3Instance) graph3Instance.destroy();

            if (currentMode === 'horizontalProjectile' || currentMode === 'projectile') {
                const angleRad = (currentMode === 'projectile') ? (parseFloat(elements.inputs.angle.value) || 0) * Math.PI / 180 : 0;
                const v0x = v0 * Math.cos(angleRad);
                const v0y = v0 * Math.sin(angleRad);
                const g = Math.abs(a); 

                const labels = [], xData = [], yData = [];
                for (let t = 0; t <= tMax; t += timeStep) {
                    const time = parseFloat(t.toFixed(2));
                    labels.push(time);
                    xData.push(v0x * time);
                    yData.push(v0y * time - 0.5 * g * time * time);
                }
                graph1Instance = createChart(elements.contexts.graph1, '軌道 y-x', xData, yData, 'rgba(16, 185, 129, 1)', 'scatter');
                graph2Instance = createChart(elements.contexts.graph2, '水平位置 x-t', labels, xData, 'rgba(59, 130, 246, 1)');
                graph3Instance = createChart(elements.contexts.graph3, '垂直位置 y-t', labels, yData, 'rgba(239, 68, 68, 1)');

            } else {
                const labels = [], posData = [], velData = [], accData = [];
                for (let t = 0; t <= tMax; t += timeStep) {
                    const time = parseFloat(t.toFixed(2));
                    labels.push(time);
                    posData.push(v0 * time + 0.5 * a * time * time);
                    velData.push(v0 + a * time); 
                    accData.push(a);
                }
                const posTitle = (currentMode === 'uniform') ? '位置 x-t' : '変位 y-t';
                graph1Instance = createChart(elements.contexts.graph1, posTitle, labels, posData, 'rgba(59, 130, 246, 1)');
                graph2Instance = createChart(elements.contexts.graph2, '速度 v-t', labels, velData, 'rgba(239, 68, 68, 1)');
                graph3Instance = createChart(elements.contexts.graph3, '加速度 a-t', labels, accData, 'rgba(16, 185, 129, 1)');
            }
        }

        function createChart(ctx, title, labels, data, color, type = 'line') {
            const chartData = (type === 'scatter') 
                ? data.map((val, i) => ({x: labels[i], y: val}))
                : data;

            return new Chart(ctx, {
                type: type,
                data: {
                    labels: (type === 'line') ? labels : null,
                    datasets: [{
                        data: chartData, borderColor: color, borderWidth: 2.5, fill: false, pointRadius: 0, tension: 0.1, showLine: true
                    }, {
                        data: [], borderColor: color, backgroundColor: 'white', pointRadius: 6, pointBorderWidth: 3, showLine: false,
                    }]
                },
                options: getChartOptions(title, type)
            });
        }
        
        function updateCalculator() {
            const v0 = parseFloat(elements.inputs.initialVelocity.value) || 0;
            const t = parseFloat(elements.inputs.timeSlider.value);
            const a = getAcceleration();
            document.getElementById('timeValue').textContent = `${t.toFixed(1)} s`;

            if (currentMode === 'horizontalProjectile' || currentMode === 'projectile') {
                const angleRad = (currentMode === 'projectile') ? (parseFloat(elements.inputs.angle.value) || 0) * Math.PI / 180 : 0;
                const v0x = v0 * Math.cos(angleRad);
                const v0y = v0 * Math.sin(angleRad);
                const g = Math.abs(a);

                const x = v0x * t;
                const y = v0y * t - 0.5 * g * t * t;
                const vx = v0x;
                const vy = v0y - g * t;
                document.getElementById('positionX').textContent = x.toFixed(2);
                document.getElementById('positionY').textContent = y.toFixed(2);
                document.getElementById('velocityX').textContent = vx.toFixed(2);
                document.getElementById('velocityY').textContent = vy.toFixed(2);
                updateTrackerPoint(t, {x, y});
            } else {
                const pos = v0 * t + 0.5 * a * t * t;
                const vel = v0 + a * t;
                document.getElementById('positionValue').textContent = pos.toFixed(2);
                document.getElementById('velocityValue').textContent = vel.toFixed(2);
                updateTrackerPoint(t, pos, vel, a);
            }
        }

        function updateTrackerPoint(t, pos, vel, acc) {
            if (currentMode === 'horizontalProjectile' || currentMode === 'projectile') {
                if (graph1Instance) {
                    graph1Instance.data.datasets[1].data = [{x: pos.x, y: pos.y}];
                    graph1Instance.update('none');
                }
                if (graph2Instance) {
                    graph2Instance.data.datasets[1].data = [{x: t, y: pos.x}];
                    graph2Instance.update('none');
                }
                if (graph3Instance) {
                    graph3Instance.data.datasets[1].data = [{x: t, y: pos.y}];
                    graph3Instance.update('none');
                }
            } else {
                if (graph1Instance) {
                    graph1Instance.data.datasets[1].data = [{x: t, y: pos}];
                    graph1Instance.update('none');
                }
                if (graph2Instance) {
                    graph2Instance.data.datasets[1].data = [{x: t, y: vel}];
                    graph2Instance.update('none');
                }
                if (graph3Instance) {
                    graph3Instance.data.datasets[1].data = [{x: t, y: acc}];
                    graph3Instance.update('none');
                }
            }
        }

        function getChartOptions(title, type) {
            const [yLabel] = title.split(' ');
            const isScatter = type === 'scatter';
            
            const xUnit = isScatter ? 'm' : 's';
            const yUnit = yLabel.startsWith('位置') || yLabel.startsWith('変位') || yLabel.startsWith('軌道') ? 'm' : (yLabel === '速度' ? 'm/s' : 'm/s²');
            
            return {
                responsive: true, maintainAspectRatio: true,
                scales: {
                    x: { type: 'linear', title: { display: true, text: `${isScatter ? '水平位置' : '時間'} (${xUnit})` } },
                    y: { title: { display: true, text: `${isScatter ? '垂直位置' : yLabel} (${yUnit})` } }
                },
                plugins: { legend: { display: false }, title: { display: true, text: title, font: { size: 18 } } },
                interaction: { intersect: false, mode: 'index' },
            };
        }

        // イベントリスナー
        Object.keys(elements.buttons).forEach(key => {
            elements.buttons[key].addEventListener('click', () => setMode(key));
        });
        
        Object.values(elements.inputs).forEach(input => {
            if (input.type !== 'range') input.addEventListener('input', updateAll);
        });
        elements.inputs.timeSlider.addEventListener('input', updateCalculator);

        // 初期化
        window.onload = () => setMode('freeFall');
    </script>
</body>
</html>
